"use strict";(self.webpackChunkbuildkit_css=self.webpackChunkbuildkit_css||[]).push([[218],{"./src/stories/modal.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DarkMode:()=>DarkMode,Default:()=>Default,LargeModal:()=>LargeModal,SmallModal:()=>SmallModal,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./dist/buildKit.css"),__webpack_require__("./dist/main.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Prebuilt/Modal",parameters:{layout:"centered"},argTypes:{darkMode:{control:"boolean"},size:{control:"select",options:["modal-sm","modal-md","modal-lg"]}}},Template=({darkMode,size})=>{const container=document.createElement("div"),button=document.createElement("button");button.innerText="Open Modal",button.className="btn btn-primary",container.appendChild(button);return(()=>{const overlay=document.createElement("div");overlay.className="modal-overlay",overlay.style.display="none";const modal=document.createElement("div");modal.className=`modal ${darkMode?"dark":""} ${size}`,modal.innerHTML=`\n      <div class="modal-header">\n        <span>Modal Title</span>\n        <button class="modal-close">&times;</button>\n      </div>\n      <div class="modal-body">\n        <p>This is a ${darkMode?"dark mode":"light mode"} modal.</p>\n      </div>\n      <div class="modal-footer">\n        <button class="btn close-modal">Close</button>\n        <button class="btn btn-primary">Save</button>\n      </div>\n    `,overlay.appendChild(modal),container.appendChild(overlay);const closeButton=modal.querySelector(".modal-close"),closeModal=modal.querySelector(".close-modal");button.addEventListener("click",(()=>{overlay.style.display="block"})),overlay.addEventListener("click",(()=>{overlay.style.display="none"})),modal.addEventListener("click",(e=>e.stopPropagation())),closeButton&&closeButton.addEventListener("click",(()=>{overlay.style.display="none"})),closeModal&&closeModal.addEventListener("click",(()=>{overlay.style.display="none"}))})(),container},Default=Template.bind({});Default.args={darkMode:!1,size:"modal-md"};const DarkMode=Template.bind({});DarkMode.args={darkMode:!0,size:"modal-md"};const LargeModal=Template.bind({});LargeModal.args={darkMode:!1,size:"modal-lg"};const SmallModal=Template.bind({});SmallModal.args={darkMode:!1,size:"modal-sm"};const __namedExportsOrder=["Default","DarkMode","LargeModal","SmallModal"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'({\n  darkMode,\n  size\n}) => {\n  const container = document.createElement("div");\n\n  // Create button to trigger modal\n  const button = document.createElement("button");\n  button.innerText = "Open Modal";\n  button.className = "btn btn-primary";\n  container.appendChild(button);\n\n  // Function to create modal\n  const createModal = () => {\n    const overlay = document.createElement("div");\n    overlay.className = "modal-overlay";\n    overlay.style.display = "none";\n    const modal = document.createElement("div");\n    modal.className = `modal ${darkMode ? "dark" : ""} ${size}`;\n    modal.innerHTML = `\n      <div class="modal-header">\n        <span>Modal Title</span>\n        <button class="modal-close">&times;</button>\n      </div>\n      <div class="modal-body">\n        <p>This is a ${darkMode ? "dark mode" : "light mode"} modal.</p>\n      </div>\n      <div class="modal-footer">\n        <button class="btn close-modal">Close</button>\n        <button class="btn btn-primary">Save</button>\n      </div>\n    `;\n    overlay.appendChild(modal);\n    container.appendChild(overlay);\n\n    // Ensure elements exist before adding event listeners\n    const closeButton = modal.querySelector(".modal-close");\n    const closeModal = modal.querySelector(".close-modal");\n    button.addEventListener("click", () => {\n      overlay.style.display = "block";\n    });\n    overlay.addEventListener("click", () => {\n      overlay.style.display = "none";\n    });\n    modal.addEventListener("click", e => e.stopPropagation()); // Prevent modal from closing when clicking inside\n\n    if (closeButton) {\n      closeButton.addEventListener("click", () => {\n        overlay.style.display = "none";\n      });\n    }\n    if (closeModal) {\n      closeModal.addEventListener("click", () => {\n        overlay.style.display = "none";\n      });\n    }\n  };\n  createModal(); // Call function after elements exist\n  return container;\n}',...Default.parameters?.docs?.source}}},DarkMode.parameters={...DarkMode.parameters,docs:{...DarkMode.parameters?.docs,source:{originalSource:'({\n  darkMode,\n  size\n}) => {\n  const container = document.createElement("div");\n\n  // Create button to trigger modal\n  const button = document.createElement("button");\n  button.innerText = "Open Modal";\n  button.className = "btn btn-primary";\n  container.appendChild(button);\n\n  // Function to create modal\n  const createModal = () => {\n    const overlay = document.createElement("div");\n    overlay.className = "modal-overlay";\n    overlay.style.display = "none";\n    const modal = document.createElement("div");\n    modal.className = `modal ${darkMode ? "dark" : ""} ${size}`;\n    modal.innerHTML = `\n      <div class="modal-header">\n        <span>Modal Title</span>\n        <button class="modal-close">&times;</button>\n      </div>\n      <div class="modal-body">\n        <p>This is a ${darkMode ? "dark mode" : "light mode"} modal.</p>\n      </div>\n      <div class="modal-footer">\n        <button class="btn close-modal">Close</button>\n        <button class="btn btn-primary">Save</button>\n      </div>\n    `;\n    overlay.appendChild(modal);\n    container.appendChild(overlay);\n\n    // Ensure elements exist before adding event listeners\n    const closeButton = modal.querySelector(".modal-close");\n    const closeModal = modal.querySelector(".close-modal");\n    button.addEventListener("click", () => {\n      overlay.style.display = "block";\n    });\n    overlay.addEventListener("click", () => {\n      overlay.style.display = "none";\n    });\n    modal.addEventListener("click", e => e.stopPropagation()); // Prevent modal from closing when clicking inside\n\n    if (closeButton) {\n      closeButton.addEventListener("click", () => {\n        overlay.style.display = "none";\n      });\n    }\n    if (closeModal) {\n      closeModal.addEventListener("click", () => {\n        overlay.style.display = "none";\n      });\n    }\n  };\n  createModal(); // Call function after elements exist\n  return container;\n}',...DarkMode.parameters?.docs?.source}}},LargeModal.parameters={...LargeModal.parameters,docs:{...LargeModal.parameters?.docs,source:{originalSource:'({\n  darkMode,\n  size\n}) => {\n  const container = document.createElement("div");\n\n  // Create button to trigger modal\n  const button = document.createElement("button");\n  button.innerText = "Open Modal";\n  button.className = "btn btn-primary";\n  container.appendChild(button);\n\n  // Function to create modal\n  const createModal = () => {\n    const overlay = document.createElement("div");\n    overlay.className = "modal-overlay";\n    overlay.style.display = "none";\n    const modal = document.createElement("div");\n    modal.className = `modal ${darkMode ? "dark" : ""} ${size}`;\n    modal.innerHTML = `\n      <div class="modal-header">\n        <span>Modal Title</span>\n        <button class="modal-close">&times;</button>\n      </div>\n      <div class="modal-body">\n        <p>This is a ${darkMode ? "dark mode" : "light mode"} modal.</p>\n      </div>\n      <div class="modal-footer">\n        <button class="btn close-modal">Close</button>\n        <button class="btn btn-primary">Save</button>\n      </div>\n    `;\n    overlay.appendChild(modal);\n    container.appendChild(overlay);\n\n    // Ensure elements exist before adding event listeners\n    const closeButton = modal.querySelector(".modal-close");\n    const closeModal = modal.querySelector(".close-modal");\n    button.addEventListener("click", () => {\n      overlay.style.display = "block";\n    });\n    overlay.addEventListener("click", () => {\n      overlay.style.display = "none";\n    });\n    modal.addEventListener("click", e => e.stopPropagation()); // Prevent modal from closing when clicking inside\n\n    if (closeButton) {\n      closeButton.addEventListener("click", () => {\n        overlay.style.display = "none";\n      });\n    }\n    if (closeModal) {\n      closeModal.addEventListener("click", () => {\n        overlay.style.display = "none";\n      });\n    }\n  };\n  createModal(); // Call function after elements exist\n  return container;\n}',...LargeModal.parameters?.docs?.source}}},SmallModal.parameters={...SmallModal.parameters,docs:{...SmallModal.parameters?.docs,source:{originalSource:'({\n  darkMode,\n  size\n}) => {\n  const container = document.createElement("div");\n\n  // Create button to trigger modal\n  const button = document.createElement("button");\n  button.innerText = "Open Modal";\n  button.className = "btn btn-primary";\n  container.appendChild(button);\n\n  // Function to create modal\n  const createModal = () => {\n    const overlay = document.createElement("div");\n    overlay.className = "modal-overlay";\n    overlay.style.display = "none";\n    const modal = document.createElement("div");\n    modal.className = `modal ${darkMode ? "dark" : ""} ${size}`;\n    modal.innerHTML = `\n      <div class="modal-header">\n        <span>Modal Title</span>\n        <button class="modal-close">&times;</button>\n      </div>\n      <div class="modal-body">\n        <p>This is a ${darkMode ? "dark mode" : "light mode"} modal.</p>\n      </div>\n      <div class="modal-footer">\n        <button class="btn close-modal">Close</button>\n        <button class="btn btn-primary">Save</button>\n      </div>\n    `;\n    overlay.appendChild(modal);\n    container.appendChild(overlay);\n\n    // Ensure elements exist before adding event listeners\n    const closeButton = modal.querySelector(".modal-close");\n    const closeModal = modal.querySelector(".close-modal");\n    button.addEventListener("click", () => {\n      overlay.style.display = "block";\n    });\n    overlay.addEventListener("click", () => {\n      overlay.style.display = "none";\n    });\n    modal.addEventListener("click", e => e.stopPropagation()); // Prevent modal from closing when clicking inside\n\n    if (closeButton) {\n      closeButton.addEventListener("click", () => {\n        overlay.style.display = "none";\n      });\n    }\n    if (closeModal) {\n      closeModal.addEventListener("click", () => {\n        overlay.style.display = "none";\n      });\n    }\n  };\n  createModal(); // Call function after elements exist\n  return container;\n}',...SmallModal.parameters?.docs?.source}}}}}]);